name: Docker Image CI

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build]
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**/README.md'
      - 'Ubuntu/**'
      - '.github/**'
      - '.gitattributes'
      - '.gitignore'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'all'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract version from main.py
        id: extract_version
        run: |
          VERSION=$(grep -Po "(?<=version = ')[^']+" main.py)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Set environment variables
        run: |
          echo "REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push to Docker Hub and GitHub Registry
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:${{ env.VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_NAME }}:latest
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/${{ env.REPO_NAME }}:${{ env.VERSION }}
            ghcr.io/${{ env.REPO_OWNER_LOWER }}/${{ env.REPO_NAME }}:latest
      - name: Check if Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view ${{ steps.extract_version.outputs.version }} --repo ${{ github.repository }}; then
            echo "Release already exists for version ${{ steps.extract_version.outputs.version }}"
            echo "release_exists=true" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist for version ${{ steps.extract_version.outputs.version }}"
            echo "release_exists=false" >> $GITHUB_ENV
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create Release with CHANGELOG Notes
        if: steps.check_release.outputs.release_exists == 'false'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NOTES=$(awk '/^## Version \[${{ steps.extract_version.outputs.version }}\]/ {flag=1; next} /^## Version \[/ {flag=0} flag' CHANGELOG.md)
          gh release create ${{ steps.extract_version.outputs.version }} \
            --repo ${{ github.repository }} \
            --title "Release ${{ steps.extract_version.outputs.version }}" \
            --notes "$RELEASE_NOTES" \
            --draft=false \
            --prerelease=false

  announce:
    needs: build-and-push
    if: needs.build-and-push.outputs.release_exists == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Post announcement to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          VERSION: ${{ needs.build-and-push.outputs.version }}
        run: |
          RELEASE_NOTES=$(awk '/^## Version \[${{ env.VERSION }}\]/ {flag=1; next} /^## Version \[/ {flag=0} flag' CHANGELOG.md)
          ANNOUNCEMENT_BODY="ðŸš€ **New Release: Version [${{ env.VERSION }}]**${RELEASE_NOTES}"
          ESCAPED_BODY=$(echo "$ANNOUNCEMENT_BODY" | jq -Rsa .)
          curl -H "Content-Type: application/json" \
               -d "{\"content\": $ESCAPED_BODY}" \
               $DISCORD_WEBHOOK_URL

      - name: Post announcement to Discussions
        id: post_announcement
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build-and-push.outputs.version }}
        run: |
          echo "Fetching discussion categories..."
          QUERY='
          {
            repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
              id
              discussionCategories(first: 10) {
                nodes {
                  id
                  slug
                }
              }
            }
          }'
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d '{"query":"'"$QUERY"'"}' https://api.github.com/graphql)
          echo "Response: $RESPONSE"
          
          REPOSITORY_ID=$(echo "$RESPONSE" | jq -r '.data.repository.id')
          CATEGORY_ID=$(echo "$RESPONSE" | jq -r '.data.repository.discussionCategories.nodes[] | select(.slug == "announcements") | .id')
          echo "REPOSITORY_ID=$REPOSITORY_ID" >> $GITHUB_ENV
          echo "CATEGORY_ID=$CATEGORY_ID" >> $GITHUB_ENV

      - name: Create announcement discussion
        id: create_discussion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_ID: ${{ env.REPOSITORY_ID }}
          CATEGORY_ID: ${{ env.CATEGORY_ID }}
          VERSION: ${{ needs.build-and-push.outputs.version }}
        run: |
          if [ -z "$CATEGORY_ID" ]; then
            echo "Error: Could not find Announcements category ID"
            exit 1
          fi

          RELEASE_NOTES=$(awk '/^## Version \[${{ env.VERSION }}\]/ {flag=1; next} /^## Version \[/ {flag=0} flag' CHANGELOG.md)
          ANNOUNCEMENT_TITLE="ðŸš€ New Release: ${{ env.VERSION }}"
          ANNOUNCEMENT_BODY="**New Release: ${{ env.VERSION }}**\n\n${RELEASE_NOTES}\n\n[Download the release](https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }})."

          MUTATION='
          mutation CreateDiscussion($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
            createDiscussion(input: {
              repositoryId: $repositoryId,
              categoryId: $categoryId,
              title: $title,
              body: $body
            }) {
              discussion {
                id
                url
              }
            }
          }'
          VARIABLES='{"repositoryId":"'"$REPOSITORY_ID"'","categoryId":"'"$CATEGORY_ID"'","title":"'"$ANNOUNCEMENT_TITLE"'","body":"'"$ANNOUNCEMENT_BODY"'"}'
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d '{"query":"'"$MUTATION"'","variables":'"$VARIABLES"'}' https://api.github.com/graphql)
          echo "Response: $RESPONSE"
          
          DISCUSSION_ID=$(echo "$RESPONSE" | jq -r '.data.createDiscussion.discussion.id')
          DISCUSSION_URL=$(echo "$RESPONSE" | jq -r '.data.createDiscussion.discussion.url')
          echo "DISCUSSION_ID=$DISCUSSION_ID" >> $GITHUB_ENV
          echo "DISCUSSION_URL=$DISCUSSION_URL" >> $GITHUB_ENV

      - name: Unpin previous announcements
        id: unpin_previous
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_ID: ${{ env.REPOSITORY_ID }}
        run: |
          QUERY='
          {
            repository(id: "'"${REPOSITORY_ID}"'") {
              discussions(first: 10, orderBy: {field: CREATED_AT, direction: DESC}) {
                nodes {
                  id
                  isPinned
                  category {
                    slug
                  }
                }
              }
            }
          }'
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d '{"query":"'"$QUERY"'"}' https://api.github.com/graphql)
          echo "Response: $RESPONSE"
          
          PREVIOUS_DISCUSSIONS=$(echo "$RESPONSE" | jq -r '.data.repository.discussions.nodes[] | select(.isPinned == true and .category.slug == "announcements") | .id')
          for DISCUSSION_ID in $PREVIOUS_DISCUSSIONS; do
            MUTATION='
            mutation UnpinDiscussion($discussionId: ID!) {
              unpinDiscussion(input: {discussionId: $discussionId}) {
                discussion {
                  id
                }
              }
            }'
            VARIABLES='{"discussionId":"'"$DISCUSSION_ID"'"}'
            curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d '{"query":"'"$MUTATION"'","variables":'"$VARIABLES"'}' https://api.github.com/graphql
          done

      - name: Pin new announcement
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCUSSION_ID: ${{ env.DISCUSSION_ID }}
        run: |
          MUTATION='
          mutation PinDiscussion($discussionId: ID!) {
            pinDiscussion(input: {discussionId: $discussionId}) {
              discussion {
                id
              }
            }
          }'
          VARIABLES='{"discussionId":"'"$DISCUSSION_ID"'"}'
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -X POST -d '{"query":"'"$MUTATION"'","variables":'"$VARIABLES"'}' https://api.github.com/graphql)
          echo "Response: $RESPONSE"